// This code was autogenerated with `dbus-codegen-rust `, see https://github.com/diwic/dbus-rs
use dbus as dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus::blocking;

pub trait OrgKdeKWin {
    fn cascade_desktop(&self) -> Result<(), dbus::Error>;
    fn unclutter_desktop(&self) -> Result<(), dbus::Error>;
    fn reconfigure(&self) -> Result<(), dbus::Error>;
    fn kill_window(&self) -> Result<(), dbus::Error>;
    fn set_current_desktop(&self, desktop: i32) -> Result<bool, dbus::Error>;
    fn current_desktop(&self) -> Result<i32, dbus::Error>;
    fn next_desktop(&self) -> Result<(), dbus::Error>;
    fn previous_desktop(&self) -> Result<(), dbus::Error>;
    fn stop_activity(&self, arg0: &str) -> Result<bool, dbus::Error>;
    fn start_activity(&self, arg0: &str) -> Result<bool, dbus::Error>;
    fn support_information(&self) -> Result<String, dbus::Error>;
    fn show_debug_console(&self) -> Result<(), dbus::Error>;
    fn replace(&self) -> Result<(), dbus::Error>;
    fn query_window_info(&self) -> Result<arg::PropMap, dbus::Error>;
    fn get_window_info(&self, arg0: &str) -> Result<arg::PropMap, dbus::Error>;
    fn set_app_default_scale(&self, arg0: f64) -> Result<(), dbus::Error>;
    fn get_app_default_scale(&self) -> Result<f64, dbus::Error>;
    fn has_alpha_numeric_keyboard(&self) -> Result<bool, dbus::Error>;
    fn send_fake_key(&self, arg0: u32, arg1: u32) -> Result<(), dbus::Error>;
    fn update_vkbregion(&self, arg0: f64, arg1: f64, arg2: f64, arg3: f64) -> Result<(), dbus::Error>;
    fn update_vkregion(&self, arg0: i32, arg1: i32, arg2: i32, arg3: i32) -> Result<(), dbus::Error>;
    fn notify_vkstatus(&self, arg0: bool) -> Result<(), dbus::Error>;
    fn update_vkbvisibility(&self, arg0: bool) -> Result<(), dbus::Error>;
    fn screen_orientation(&self) -> Result<i32, dbus::Error>;
    fn set_always_show_virtual_keyboard(&self, arg0: bool) -> Result<(), dbus::Error>;
    fn always_show_virtual_keyboard(&self) -> Result<bool, dbus::Error>;
    fn is_caps_on(&self) -> Result<bool, dbus::Error>;
    fn change_download_window_mode(&self, arg0: i32, arg1: i32) -> Result<bool, dbus::Error>;
    fn focus_changed(&self, arg0: bool) -> Result<(), dbus::Error>;
}

#[derive(Debug)]
pub struct OrgKdeKWinReloadConfig {
}

impl arg::AppendAll for OrgKdeKWinReloadConfig {
    fn append(&self, _: &mut arg::IterAppend) {
    }
}

impl arg::ReadAll for OrgKdeKWinReloadConfig {
    fn read(_: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgKdeKWinReloadConfig {
        })
    }
}

impl dbus::message::SignalArgs for OrgKdeKWinReloadConfig {
    const NAME: &'static str = "reloadConfig";
    const INTERFACE: &'static str = "org.kde.KWin";
}

#[derive(Debug)]
pub struct OrgKdeKWinAppDefaultScaleChanged {
    pub scale: f64,
}

impl arg::AppendAll for OrgKdeKWinAppDefaultScaleChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.scale, i);
    }
}

impl arg::ReadAll for OrgKdeKWinAppDefaultScaleChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgKdeKWinAppDefaultScaleChanged {
            scale: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgKdeKWinAppDefaultScaleChanged {
    const NAME: &'static str = "appDefaultScaleChanged";
    const INTERFACE: &'static str = "org.kde.KWin";
}

#[derive(Debug)]
pub struct OrgKdeKWinHasAlphaNumericKeyboardChanged {
    pub set: bool,
}

impl arg::AppendAll for OrgKdeKWinHasAlphaNumericKeyboardChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.set, i);
    }
}

impl arg::ReadAll for OrgKdeKWinHasAlphaNumericKeyboardChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgKdeKWinHasAlphaNumericKeyboardChanged {
            set: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgKdeKWinHasAlphaNumericKeyboardChanged {
    const NAME: &'static str = "hasAlphaNumericKeyboardChanged";
    const INTERFACE: &'static str = "org.kde.KWin";
}

#[derive(Debug)]
pub struct OrgKdeKWinMouseOnTopLeftConer {
}

impl arg::AppendAll for OrgKdeKWinMouseOnTopLeftConer {
    fn append(&self, _: &mut arg::IterAppend) {
    }
}

impl arg::ReadAll for OrgKdeKWinMouseOnTopLeftConer {
    fn read(_: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgKdeKWinMouseOnTopLeftConer {
        })
    }
}

impl dbus::message::SignalArgs for OrgKdeKWinMouseOnTopLeftConer {
    const NAME: &'static str = "mouseOnTopLeftConer";
    const INTERFACE: &'static str = "org.kde.KWin";
}

#[derive(Debug)]
pub struct OrgKdeKWinMouseOnTopRightConer {
}

impl arg::AppendAll for OrgKdeKWinMouseOnTopRightConer {
    fn append(&self, _: &mut arg::IterAppend) {
    }
}

impl arg::ReadAll for OrgKdeKWinMouseOnTopRightConer {
    fn read(_: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgKdeKWinMouseOnTopRightConer {
        })
    }
}

impl dbus::message::SignalArgs for OrgKdeKWinMouseOnTopRightConer {
    const NAME: &'static str = "mouseOnTopRightConer";
    const INTERFACE: &'static str = "org.kde.KWin";
}

#[derive(Debug)]
pub struct OrgKdeKWinScreenOrientationChanged {
    pub orientation: bool,
}

impl arg::AppendAll for OrgKdeKWinScreenOrientationChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.orientation, i);
    }
}

impl arg::ReadAll for OrgKdeKWinScreenOrientationChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgKdeKWinScreenOrientationChanged {
            orientation: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgKdeKWinScreenOrientationChanged {
    const NAME: &'static str = "screenOrientationChanged";
    const INTERFACE: &'static str = "org.kde.KWin";
}

#[derive(Debug)]
pub struct OrgKdeKWinCapsChanged {
    pub caps: bool,
}

impl arg::AppendAll for OrgKdeKWinCapsChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.caps, i);
    }
}

impl arg::ReadAll for OrgKdeKWinCapsChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgKdeKWinCapsChanged {
            caps: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgKdeKWinCapsChanged {
    const NAME: &'static str = "capsChanged";
    const INTERFACE: &'static str = "org.kde.KWin";
}

#[derive(Debug)]
pub struct OrgKdeKWinAlwaysShowVirtualKeyboardChanged {
    pub set: bool,
}

impl arg::AppendAll for OrgKdeKWinAlwaysShowVirtualKeyboardChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.set, i);
    }
}

impl arg::ReadAll for OrgKdeKWinAlwaysShowVirtualKeyboardChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgKdeKWinAlwaysShowVirtualKeyboardChanged {
            set: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgKdeKWinAlwaysShowVirtualKeyboardChanged {
    const NAME: &'static str = "alwaysShowVirtualKeyboardChanged";
    const INTERFACE: &'static str = "org.kde.KWin";
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target=T>> OrgKdeKWin for blocking::Proxy<'a, C> {

    fn cascade_desktop(&self) -> Result<(), dbus::Error> {
        self.method_call("org.kde.KWin", "cascadeDesktop", ())
    }

    fn unclutter_desktop(&self) -> Result<(), dbus::Error> {
        self.method_call("org.kde.KWin", "unclutterDesktop", ())
    }

    fn reconfigure(&self) -> Result<(), dbus::Error> {
        self.method_call("org.kde.KWin", "reconfigure", ())
    }

    fn kill_window(&self) -> Result<(), dbus::Error> {
        self.method_call("org.kde.KWin", "killWindow", ())
    }

    fn set_current_desktop(&self, desktop: i32) -> Result<bool, dbus::Error> {
        self.method_call("org.kde.KWin", "setCurrentDesktop", (desktop, ))
            .and_then(|r: (bool, )| Ok(r.0, ))
    }

    fn current_desktop(&self) -> Result<i32, dbus::Error> {
        self.method_call("org.kde.KWin", "currentDesktop", ())
            .and_then(|r: (i32, )| Ok(r.0, ))
    }

    fn next_desktop(&self) -> Result<(), dbus::Error> {
        self.method_call("org.kde.KWin", "nextDesktop", ())
    }

    fn previous_desktop(&self) -> Result<(), dbus::Error> {
        self.method_call("org.kde.KWin", "previousDesktop", ())
    }

    fn stop_activity(&self, arg0: &str) -> Result<bool, dbus::Error> {
        self.method_call("org.kde.KWin", "stopActivity", (arg0, ))
            .and_then(|r: (bool, )| Ok(r.0, ))
    }

    fn start_activity(&self, arg0: &str) -> Result<bool, dbus::Error> {
        self.method_call("org.kde.KWin", "startActivity", (arg0, ))
            .and_then(|r: (bool, )| Ok(r.0, ))
    }

    fn support_information(&self) -> Result<String, dbus::Error> {
        self.method_call("org.kde.KWin", "supportInformation", ())
            .and_then(|r: (String, )| Ok(r.0, ))
    }

    fn show_debug_console(&self) -> Result<(), dbus::Error> {
        self.method_call("org.kde.KWin", "showDebugConsole", ())
    }

    fn replace(&self) -> Result<(), dbus::Error> {
        self.method_call("org.kde.KWin", "replace", ())
    }

    fn query_window_info(&self) -> Result<arg::PropMap, dbus::Error> {
        self.method_call("org.kde.KWin", "queryWindowInfo", ())
            .and_then(|r: (arg::PropMap, )| Ok(r.0, ))
    }

    fn get_window_info(&self, arg0: &str) -> Result<arg::PropMap, dbus::Error> {
        self.method_call("org.kde.KWin", "getWindowInfo", (arg0, ))
            .and_then(|r: (arg::PropMap, )| Ok(r.0, ))
    }

    fn set_app_default_scale(&self, arg0: f64) -> Result<(), dbus::Error> {
        self.method_call("org.kde.KWin", "setAppDefaultScale", (arg0, ))
    }

    fn get_app_default_scale(&self) -> Result<f64, dbus::Error> {
        self.method_call("org.kde.KWin", "getAppDefaultScale", ())
            .and_then(|r: (f64, )| Ok(r.0, ))
    }

    fn has_alpha_numeric_keyboard(&self) -> Result<bool, dbus::Error> {
        self.method_call("org.kde.KWin", "hasAlphaNumericKeyboard", ())
            .and_then(|r: (bool, )| Ok(r.0, ))
    }

    fn send_fake_key(&self, arg0: u32, arg1: u32) -> Result<(), dbus::Error> {
        self.method_call("org.kde.KWin", "sendFakeKey", (arg0, arg1, ))
    }

    fn update_vkbregion(&self, arg0: f64, arg1: f64, arg2: f64, arg3: f64) -> Result<(), dbus::Error> {
        self.method_call("org.kde.KWin", "updateVKBRegion", (arg0, arg1, arg2, arg3, ))
    }

    fn update_vkregion(&self, arg0: i32, arg1: i32, arg2: i32, arg3: i32) -> Result<(), dbus::Error> {
        self.method_call("org.kde.KWin", "updateVKRegion", (arg0, arg1, arg2, arg3, ))
    }

    fn notify_vkstatus(&self, arg0: bool) -> Result<(), dbus::Error> {
        self.method_call("org.kde.KWin", "notifyVKStatus", (arg0, ))
    }

    fn update_vkbvisibility(&self, arg0: bool) -> Result<(), dbus::Error> {
        self.method_call("org.kde.KWin", "updateVKBVisibility", (arg0, ))
    }

    fn screen_orientation(&self) -> Result<i32, dbus::Error> {
        self.method_call("org.kde.KWin", "screenOrientation", ())
            .and_then(|r: (i32, )| Ok(r.0, ))
    }

    fn set_always_show_virtual_keyboard(&self, arg0: bool) -> Result<(), dbus::Error> {
        self.method_call("org.kde.KWin", "setAlwaysShowVirtualKeyboard", (arg0, ))
    }

    fn always_show_virtual_keyboard(&self) -> Result<bool, dbus::Error> {
        self.method_call("org.kde.KWin", "alwaysShowVirtualKeyboard", ())
            .and_then(|r: (bool, )| Ok(r.0, ))
    }

    fn is_caps_on(&self) -> Result<bool, dbus::Error> {
        self.method_call("org.kde.KWin", "isCapsOn", ())
            .and_then(|r: (bool, )| Ok(r.0, ))
    }

    fn change_download_window_mode(&self, arg0: i32, arg1: i32) -> Result<bool, dbus::Error> {
        self.method_call("org.kde.KWin", "changeDownloadWindowMode", (arg0, arg1, ))
            .and_then(|r: (bool, )| Ok(r.0, ))
    }

    fn focus_changed(&self, arg0: bool) -> Result<(), dbus::Error> {
        self.method_call("org.kde.KWin", "focusChanged", (arg0, ))
    }
}
