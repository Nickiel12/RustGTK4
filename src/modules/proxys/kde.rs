//! # DBus interface proxy for: `org.kde.KWin`
//!
//! This code was generated by `zbus-xmlgen` `2.0.1` from DBus introspection data.
//! Source: `Interface '/KWin' from service 'org.kde.KWin' on session bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the
//! [Writing a client proxy](https://dbus.pages.freedesktop.org/zbus/client.html)
//! section of the zbus documentation.
//!
//! This DBus object implements
//! [standard DBus interfaces](https://dbus.freedesktop.org/doc/dbus-specification.html),
//! (`org.freedesktop.DBus.*`) for which the following zbus proxies can be used:
//!
//! * [`zbus::fdo::PropertiesProxy`]
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PeerProxy`]
//!
//! â€¦consequently `zbus-xmlgen` did not generate code for the above interfaces.

use zbus::dbus_proxy;

#[dbus_proxy(interface = "org.kde.KWin",
            default_path = "/KWin")]
trait KWin {
    /// cascadeDesktop method
    fn cascade_desktop(&self) -> zbus::Result<()>;

    /// currentDesktop method
    fn current_desktop(&self) -> zbus::Result<i32>;

    /// getWindowInfo method
    fn get_window_info(
        &self,
        arg_1: &str,
    ) -> zbus::Result<std::collections::HashMap<String, zbus::zvariant::OwnedValue>>;

    /// killWindow method
    fn kill_window(&self) -> zbus::Result<()>;

    /// nextDesktop method
    fn next_desktop(&self) -> zbus::Result<()>;

    /// previousDesktop method
    fn previous_desktop(&self) -> zbus::Result<()>;

    /// queryWindowInfo method
    fn query_window_info(
        &self,
    ) -> zbus::Result<std::collections::HashMap<String, zbus::zvariant::OwnedValue>>;

    /// reconfigure method
    fn reconfigure(&self) -> zbus::Result<()>;

    /// replace method
    fn replace(&self) -> zbus::Result<()>;

    /// setCurrentDesktop method
    fn set_current_desktop(&self, desktop: i32) -> zbus::Result<bool>;

    /// showDebugConsole method
    fn show_debug_console(&self) -> zbus::Result<()>;

    /// startActivity method
    fn start_activity(&self, arg_1: &str) -> zbus::Result<bool>;

    /// stopActivity method
    fn stop_activity(&self, arg_1: &str) -> zbus::Result<bool>;

    /// supportInformation method
    fn support_information(&self) -> zbus::Result<String>;

    /// unclutterDesktop method
    fn unclutter_desktop(&self) -> zbus::Result<()>;

    /// reloadConfig signal
    #[dbus_proxy(signal)]
    fn reload_config(&self) -> zbus::Result<()>;
}
