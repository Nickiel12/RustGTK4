//! # DBus interface proxy for: `org.galaxymenu.MyGreeter1`
//!
//! This code was generated by `zbus-xmlgen` `2.0.1` from DBus introspection data.
//! Source: `Interface '/org/galaxymenu/MyGreeter' from service 'org.galaxymenu.MyGreeter' on session bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the
//! [Writing a client proxy](https://dbus.pages.freedesktop.org/zbus/client.html)
//! section of the zbus documentation.
//!
//! This DBus object implements
//! [standard DBus interfaces](https://dbus.freedesktop.org/doc/dbus-specification.html),
//! (`org.freedesktop.DBus.*`) for which the following zbus proxies can be used:
//!
//! * [`zbus::fdo::PropertiesProxy`]
//! * [`zbus::fdo::PeerProxy`]
//! * [`zbus::fdo::IntrospectableProxy`]
//!
//! â€¦consequently `zbus-xmlgen` did not generate code for the above interfaces.

use zbus::dbus_proxy;

#[dbus_proxy(interface = "org.galaxymenu.MyGreeter1")]
trait MyGreeter1 {
    /// GoAway method
    fn go_away(&self) -> zbus::Result<()>;

    /// NextDesktop method
    fn next_desktop(&self) -> zbus::Result<()>;

    /// PrevDesktop method
    fn prev_desktop(&self) -> zbus::Result<()>;

    /// SayHello method
    fn say_hello(&self, name: &str) -> zbus::Result<String>;

    /// GreetedEveryone signal
    #[dbus_proxy(signal)]
    fn greeted_everyone(&self) -> zbus::Result<()>;

    /// GreeterName property
    #[dbus_proxy(property)]
    fn greeter_name(&self) -> zbus::Result<String>;
    #[dbus_proxy(property)]
    fn set_greeter_name(&self, value: &str) -> zbus::Result<()>;
}
